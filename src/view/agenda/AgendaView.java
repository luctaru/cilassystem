/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.agenda;

import model.bean.AgendaBean;
import model.bean.ConsultaBean;
import model.bean.ConvenioBean;
import model.bean.FaturamentoBean;
import model.bean.PacienteBean;
import model.bean.ProfissionalBean;
import controller.AgendaController;
import controller.FaturamentoController;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.combobox.ConvenioComboBoxModel;
import model.combobox.ProfissionalComboBoxModel;
import model.jlist.ConsultasByConvenioJListModel;
import model.jtable.AgendaTableModel;
import model.jtable.PacienteTableModel;
import util.GerViewUtil;
import view.faturamento.EditarFatuAgendamentoView;
import view.faturamento.FaturarAgendamentoView;
import view.paciente.CadastrarPacienteView;
import view.paciente.EditarHistoricoPacienteView;

/**
 *
 * @author vande
 */
public class AgendaView extends javax.swing.JFrame {

    private static final AgendaBean AGENDA = new AgendaBean();
    public static PacienteTableModel tmPaciente = null;
    public static AgendaTableModel tmAgenda = null;

    /**
     * Creates new form Agenda
     */
    public AgendaView() {
        initComponents();
        setDataAtualAgenda();
        setJcmProfissional(new ProfissionalComboBoxModel());
        setJcbConvenio(new ConvenioComboBoxModel());
        AGENDA.setPaciente(new PacienteBean());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jcCalendario = new com.toedter.calendar.JCalendar();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtPaciente = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtPaciente = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtObservacao = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jcbProfissional = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jcbConvenio = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlConsulta = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtAgenda = new javax.swing.JTable();
        btnAgendar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cila's System - Agenda");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jcCalendario.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jcCalendarioPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jcCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jcCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtPacienteMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtPaciente);

        jLabel3.setText("Nome do(a) paciente:");

        txtPaciente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPacienteKeyPressed(evt);
            }
        });

        jButton3.setText("CADASTRAR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("Observação do agendamento:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtObservacao)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jcbProfissional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbProfissionalActionPerformed(evt);
            }
        });

        jLabel1.setText("Agenda do profissional:");

        jLabel5.setText("Selecione um convênio:");

        jcbConvenio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbConvenioActionPerformed(evt);
            }
        });

        jLabel6.setText("Selecione o tipo da consulta:");

        jlConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlConsultaMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jlConsulta);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                    .addComponent(jcbConvenio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jcbProfissional, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbProfissional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        jtAgenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtAgendaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtAgenda);

        btnAgendar.setText("AGENDAR CONSULTA");
        btnAgendar.setEnabled(false);
        btnAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgendarActionPerformed(evt);
            }
        });

        btnCancelar.setText("CANCELAR CONSULTA");
        btnCancelar.setEnabled(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jMenu1.setText("Sobre");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAgendar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancelar)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgendar)
                    .addComponent(btnCancelar))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método utilizado pelo evento de clique no calendário.
     *
     * @param evt
     */
    private void jcCalendarioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jcCalendarioPropertyChange
        // TODO add your handling code here:
        if (evt.getPropertyName().equalsIgnoreCase("calendar")) {
            try {
                Calendar dataItem = jcCalendario.getCalendar();
                int dia = dataItem.get(Calendar.DAY_OF_MONTH);
                int mes = dataItem.get(Calendar.MONTH);
                int ano = dataItem.get(Calendar.YEAR);
                AGENDA.setDataAgendamento(new SimpleDateFormat("yyyy-MM-dd").parse(ano + "-" + (mes + 1) + "-" + dia));
                System.out.println("DATA SELECIONADA: " + AGENDA.getDataAgendamento());
                setJtAgenda();
            } catch (ParseException ex) {
                Logger.getLogger(AgendaView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jcCalendarioPropertyChange

    /**
     * Definir profissional para AGENDA da classe AgendaBean.
     */
    private void jcbProfissionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbProfissionalActionPerformed
        // TODO add your handling code here:
        if (jcbProfissional.getSelectedItem() != null) {
            System.out.println("DEFIFINDO A AGENDA PELO PROFISSIONAL SELECIONADO");
            AGENDA.setProfissional((ProfissionalBean) jcbProfissional.getSelectedItem());
            setJtAgenda();
            ativarBotoes();
        } else {
            System.err.println("NENHUM PROFISSIONAL SELECIONADO FOI DEFINIDO PARA AGENDA");
        }
    }//GEN-LAST:event_jcbProfissionalActionPerformed

    private void jcbConvenioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbConvenioActionPerformed
        // TODO add your handling code here:
        if (jcbConvenio.getSelectedIndex() != -1) {
            System.out.println("DEFININDO LISTA DE CONSULTAS PELO CONVÊNIO SELECIONADO");
            AGENDA.setConvenio(((ConvenioBean) jcbConvenio.getSelectedItem()));
            jlConsulta.setModel(new ConsultasByConvenioJListModel(((ConvenioBean) jcbConvenio.getSelectedItem()).getNome()));
        } else {
            System.err.println("NENHUM CONVÊNIO SELECIONADO PARA DEFINIR LISTA DE CONSULTAS");
        }
    }//GEN-LAST:event_jcbConvenioActionPerformed

    private void txtPacienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPacienteKeyPressed
        // TODO add your handling code here:
        if (txtPaciente.getText().equalsIgnoreCase("") || txtPaciente.getText().equalsIgnoreCase(" ")) {
            tmPaciente = new PacienteTableModel("null");
            jtPaciente.setModel(tmPaciente);
        } else {
            tmPaciente = new PacienteTableModel(txtPaciente.getText());
            jtPaciente.setModel(tmPaciente);
        }
        setColumnPacienteTable();
    }//GEN-LAST:event_txtPacienteKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        CadastrarPacienteView cadastrar = new CadastrarPacienteView(this, true);
        cadastrar.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Quando a frame fechar, será definica uma nova instancia para o mesmo para
     * quando abrir novamente, seus componentes estarem atualizados caso haja
     * alguma alteração externa.
     *
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        GerViewUtil.refleshAgendaView();
    }//GEN-LAST:event_formWindowClosing

    /**
     * Um clique apenas seleciona o paciente na tabela. Dois cliques, abre uma
     * frame para edição dos dados do paciente.
     *
     * @param evt
     */
    private void jtPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtPacienteMouseClicked
        // TODO add your handling code here:
        System.out.println("DEFININDO PACIENTE SELECIONADO(A)");
        AGENDA.getPaciente().setPacienteCodigo((int) jtPaciente.getValueAt(jtPaciente.getSelectedRow(), 0));
        int count = evt.getClickCount();
        if (count == 2) {
            System.out.println("ABRINDO FRAME DE EDIÇÃO DE PACIENTE");
            EditarHistoricoPacienteView editar = new EditarHistoricoPacienteView(this, true, AGENDA.getPaciente().getPacienteCodigo());
            editar.setVisible(true);
        }
    }//GEN-LAST:event_jtPacienteMouseClicked

    /**
     * Agendar consulta
     *
     * @param evt
     */
    private void btnAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgendarActionPerformed
        // TODO add your handling code here:
        if (validarAgendamento()) {
            AGENDA.setObservacao(txtObservacao.getText());
            AgendaController.createAgendamento(AGENDA);
        }
    }//GEN-LAST:event_btnAgendarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        setJcbConvenio(new ConvenioComboBoxModel());
        setJcmProfissional(new ProfissionalComboBoxModel());
    }//GEN-LAST:event_formWindowOpened

    private void jlConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlConsultaMouseClicked
        // TODO add your handling code here:
        if (jlConsulta.getSelectedIndex() != -1) {
            System.out.println("DEFININDO CONSULTA PARA AGENDAMENTO");
            ConsultaBean consulta = (ConsultaBean) jlConsulta.getSelectedValues()[0];
            AGENDA.setConsulta(consulta);
        }
    }//GEN-LAST:event_jlConsultaMouseClicked

    /**
     * Evento de clique da linha do agendamento.
     * @param evt 
     */
    private void jtAgendaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAgendaMouseClicked
        // TODO add your handling code here:
        int count = evt.getClickCount();
        if (count == 2) {
            jframeFaturamento();
        } else {
            setDataTimeAgenda();
        }
    }//GEN-LAST:event_jtAgendaMouseClicked

    /**
     * Se o agendamento não estiver faturado, abre uma JDialoge para tal. Caso o
     * contrário, abre outra para editar o faturamento existente.
     */
    private void jframeFaturamento() {
        if (!jtAgenda.getValueAt(jtAgenda.getSelectedRow(), 1).equals("")) {
            AgendaBean ag = AgendaController.searchAgendamento(AGENDA);
            AGENDA.setAgendamentoCodigo(ag.getAgendamentoCodigo());
            FaturamentoBean fat = new FaturamentoBean();
            fat.setAgenda(AGENDA);
            fat = FaturamentoController.searchFaturamentoByAgendamento(fat);
            if (fat == null) {
                FaturarAgendamentoView faturar = new FaturarAgendamentoView(this, true, AGENDA);
                faturar.setVisible(true);
            } else {
                EditarFatuAgendamentoView editar = new EditarFatuAgendamentoView(this, true, AGENDA);
                editar.setVisible(true);
            }
        }
    }

    /**
     * Atribui o agendamento selecionado para o objeto AGENDA.
     */
    private void setDataTimeAgenda() {
        try {
            Calendar dataItem = jcCalendario.getCalendar();
            int dia = dataItem.get(Calendar.DAY_OF_MONTH);
            int mes = dataItem.get(Calendar.MONTH);
            int ano = dataItem.get(Calendar.YEAR);
            AGENDA.setDataAgendamento(new SimpleDateFormat("yyyy-MM-dd H:mm")
                    .parse(ano + "-" + (mes + 1) + "-" + dia + " " + jtAgenda.getValueAt(jtAgenda.getSelectedRow(), 0)));
            System.out.println("HORÁRIO SELECIONADO: " + jtAgenda.getValueAt(jtAgenda.getSelectedRow(), 0));
        } catch (ParseException ex) {
            Logger.getLogger(AgendaView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        if (jtAgenda.getSelectedRow() != -1) {
            int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que gostária de remover este agendamento?");
            switch (confirm) {
                case JOptionPane.YES_OPTION:
                    AgendaController.deleteAgendamento(AGENDA);
                    break;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nenhum agendamento foi selecionado.");
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * Definir data atual para objeto AGENDA da classe AgendaBean.
     */
    private void setDataAtualAgenda() {
        System.out.println("DEFININDO DATA DE HOJE NA AGENDA");
        AGENDA.setDataAgendamento(new Date(System.currentTimeMillis()));
    }

    /**
     * Definir modelo do JComboBox de profissional.
     */
    public static void setJcmProfissional(ProfissionalComboBoxModel model) {
        System.out.println("DEFININDO JCOMBOX DE PROFISSIONAL");
        jcbProfissional.setModel(model);
    }

    /**
     * Definir modelo do JComboBox de convênio.
     *
     * @param model
     */
    public static void setJcbConvenio(ConvenioComboBoxModel model) {
        System.out.println("DEFININDO JCOMBOX DE CONVÊNIO");
        jcbConvenio.setModel(model);
    }

    /**
     * Definir model da agenda se profissional e data forem definidos
     * anteriormente.
     */
    private void setJtAgenda() {
        if (AGENDA.getProfissional() != null && AGENDA.getDataAgendamento() != null) {
            System.out.println("DEFININDO AGENDA POR PROFISSIONAL E DATA");
            try {
                tmAgenda = new AgendaTableModel(AGENDA);
                jtAgenda.setModel(tmAgenda);
                setColumnAgendaTable();
            } catch (Exception ex) {
                Logger.getLogger(AgendaView.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.err.println("PROFISSIONAL OU DATA NÃO DEFINIDOS AINDA PARA GERAR AGENDA");
        }
    }

    /**
     * Ativar botões da agenda.
     */
    private void ativarBotoes() {
        System.out.println("ATIVANDO BOTÕES DA AGENDA");
        btnAgendar.setEnabled(true);
        btnCancelar.setEnabled(true);
    }

    /**
     * Método que define o tamanho das colunas da tabela de pacientes.
     */
    private void setColumnPacienteTable() {
        jtPaciente.getColumnModel().getColumn(0).setPreferredWidth(50);
        jtPaciente.getColumnModel().getColumn(1).setPreferredWidth(200);
        jtPaciente.getColumnModel().getColumn(2).setPreferredWidth(50);
        jtPaciente.getColumnModel().getColumn(3).setPreferredWidth(50);
    }

    /**
     * Método que define o tamanho das colunas da tabela agenda.
     */
    private void setColumnAgendaTable() {
        jtAgenda.getColumnModel().getColumn(0).setPreferredWidth(50);
        jtAgenda.getColumnModel().getColumn(1).setPreferredWidth(350);
        jtAgenda.getColumnModel().getColumn(2).setPreferredWidth(100);
        jtAgenda.getColumnModel().getColumn(3).setPreferredWidth(250);
        jtAgenda.getColumnModel().getColumn(4).setPreferredWidth(200);
        jtAgenda.getColumnModel().getColumn(5).setPreferredWidth(200);
    }

    /**
     * Validar se dados de agendamentos foram definidos.
     *
     * @return
     */
    private boolean validarAgendamento() {
        if (jcbProfissional.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione um médico.");
            return false;
        }
        if (jcbConvenio.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione um convênio.");
            return false;
        }
        if (jlConsulta.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione uma consulta.");
            return false;
        }
        if (jtPaciente.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione um paciente.");
            return false;
        }
        if (jtAgenda.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione um horário.");
            return false;
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgendaView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgendaView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgendaView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgendaView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgendaView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgendar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.calendar.JCalendar jcCalendario;
    private static javax.swing.JComboBox<String> jcbConvenio;
    private static javax.swing.JComboBox<String> jcbProfissional;
    private javax.swing.JList<String> jlConsulta;
    private javax.swing.JTable jtAgenda;
    private javax.swing.JTable jtPaciente;
    private javax.swing.JTextField txtObservacao;
    private javax.swing.JTextField txtPaciente;
    // End of variables declaration//GEN-END:variables
}
